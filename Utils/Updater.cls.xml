<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Utils.Updater">
<TimeCreated>64021,74748.69193</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/**
*Метод, скачивающий архив обновлений БД с сайта ФИАС по заданной ссылке	
**/
]]></Content>
</UDLText>

<Method name="Load">
<ClassMethod>1</ClassMethod>
<FormalSpec>url</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	///пример url: "/Public/Downloads/Actual/base.7z"	
	Set httprequest=##class(%Net.HttpRequest).%New()
	Set httprequest.Server="fias.nalog.ru"
	Write "Инициализируем http подключение...",!
	Write "Запущен процесс № "
	
	///$Job - id текущего процесса
	Write $Job,!
	Set sc=httprequest.Get(url)	
	
	///Если sc на данном этапе возвращает ошибку, то мы выводим свое сообщение об ошибке, тут все понятно, как и в подобном коде ниже.
	if $$$ISERR(sc) {
		w "Ошибка при инициализации http подключения. Проверьте соединение с интернетом или правильность ввода ссылки."
		q 0
	}
	Write "Размер скачиваемого файла:"_httprequest.HttpResponse.Data.Size,!	
	Set stream=##class(%Stream.FileBinary).%New()
	
	///Не понимаю, зачем объявлять переменную count, если она нигде не меняет значение, нельзя ли просто сделать так: Set stream.Filename= $PIECE(url,"/",*+0) ?
	Set count=0		  	
	
	///Так и не разобрался куда сохраняет файл данный код; $PIECE(url,"/",*+count) возвращает просто имя файла без пути, а по заданию нужно, чтобы сохранение производилось в C:\temp\, поэтому предлагаю следующий вариант: Set stream.Filename= "C:\temp\"_$PIECE(url,"/",*+count)
	s dir = $$defdir^%GLO("OPENADDRESS")
	Set stream.Filename=dir_$PIECE(url,"/",*)	
	
	///Понял, что это перемотка потока в начало, но не понял, зачем она нужна =)
	Do httprequest.HttpResponse.Data.Rewind()
	Set sc=stream.CopyFrom(httprequest.HttpResponse.Data)	
	if $$$ISERR(sc) {
		w "Ошибка при попытке копировать данные из потока."
		q 0
	}
	Set sc=stream.%Save()
	if $$$ISERR(sc) {
		w "Ошибка при попытке сохранить архив."
		q 0
	}
	s sc = ..UnZip(dir_"fias", stream.Filename)
	if $$$ISERR(sc) {
		w "Ошибка при попытке распаковать архив."
		q 0
	}
	s sc = ..Import(dir_"fias")
	if $$$ISERR(sc) {
		w "Ошибка при попытке импортирвоать данные."
		q 0
	}
	q 1
]]></Implementation>
</Method>

<Method name="GetUpdateInfo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[

	s info = ##class(DownloadService.DownloadFileInfo).%New()
	s info = ##class(DownloadService.DownloadServiceSoap).%New().GetLastDownloadFileInfo()
	s currId = 0
	s selectId = info.VersionId
	&sql(select MAX(VersionId) into :currId from Data.VersionInfo)
	if selectId > currId { 
		TSTART	
		s res = ..Load($p(info.FiasDeltaDbfUrl,"/",4,7))		
		if res = 1 {						
			s version = ##class(Data.VersionInfo).%New()
			s version.VersionId = selectId //лучше преобразовать в integer
			s version.VersionName = info.TextVersion
			d version.%Save()						
			TCOMMIT
		} else {
			TROLLBACK	
		}
	} else {
		w "Версии БД ФИАС совпадают. Обновление не нужно."	
	}
]]></Implementation>
</Method>

<Method name="UnZip">
<ClassMethod>1</ClassMethod>
<FormalSpec>dir,file</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/*s Archiver = "C:\Program Files\7-Zip\7z.exe"	
	s CommandString=Archiver_" x -r -aoa -o"""_dir_""" "_" """_file_""""*/
	s CommandString = "unrar e "_file_" "_dir
	s st = $ZF(-1,CommandString)	
	q st
]]></Implementation>
</Method>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<FormalSpec>dir</FormalSpec>
<Implementation><![CDATA[
	d ##class(Data.ACTSTAT).Input(dir)
	d ##class(Data.ADDROBJ).Input(dir)
	d ##class(Data.CENTERST).Input(dir)
	d ##class(Data.CURENTST).Input(dir)
	d ##class(Data.ESTSTAT).Input(dir)
	//d ##class(Data.HOUSE).Input(dir)
	d ##class(Data.HSTSTAT).Input(dir)
	d ##class(Data.INTVSTAT).Input(dir)
	//d ##class(Data.LANDMARK).Input(dir)
	d ##class(Data.NDOCTYPE).Input(dir)
	//d ##class(Data.NORMDOC).Input(dir)
	d ##class(Data.OPERSTAT).Input(dir)
	//d ##class(Data.SOCRBASE).Input(dir)
	d ##class(Data.STRSTAT).Input(dir)
]]></Implementation>
</Method>
</Class>
</Export>
